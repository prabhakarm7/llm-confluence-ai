import React, { useState, useEffect, useCallback } from 'react';
import ReactFlow, { 
  Node, 
  Edge, 
  Controls, 
  Background,
  useNodesState,
  useEdgesState,
  MarkerType,
  ConnectionMode
} from 'reactflow';
import 'reactflow/dist/style.css';

// Types
interface GraphFilters {
  regions?: string[];
  sales_regions?: string[];
  channels?: string[];
  node_types?: string[];
  asset_classes?: string[];
  mandate_status?: string[];
  privacy_levels?: string[];
  level_of_influence?: string[];
  pca?: string[];
  aca?: string[];
  rating_change?: string[];
  rank_group?: string[];
}

interface FilterOptions {
  regions: string[];
  sales_regions: string[];
  channels: string[];
  asset_classes: string[];
  mandate_status: string[];
  privacy_levels: string[];
  level_of_influence: string[];
  pca_options: string[];
  aca_options: string[];
  rating_changes: string[];
  rank_groups: string[];
  consultants: Array<{id: string; name: string}>;
  companies: Array<{id: string; name: string}>;
  products: Array<{id: string; name: string}>;
  field_consultants: Array<{id: string; name: string}>;
}

// Custom Node Components
const ConsultantNode = ({ data }: { data: any }) => (
  <div className="bg-blue-500 text-white p-3 rounded-lg shadow-lg border-2 border-blue-600 min-w-[180px]">
    <div className="font-bold text-sm mb-2">{data.name}</div>
    <div className="text-xs space-y-1">
      <div>📍 {data.region} | {data.sales_region?.join(', ')}</div>
      <div>💼 {data.channel}</div>
      <div>⭐ Influence: {data.level_of_influence}</div>
      <div>👤 PCA: {data.pca}</div>
      {data.aca && <div>🔄 ACA: {data.aca}</div>}
    </div>
  </div>
);

const CompanyNode = ({ data }: { data: any }) => (
  <div className="bg-orange-500 text-white p-3 rounded-lg shadow-lg border-2 border-orange-600 min-w-[180px]">
    <div className="font-bold text-sm mb-2">{data.name}</div>
    <div className="text-xs space-y-1">
      <div>📍 {data.region}</div>
      <div>🏢 {Array.isArray(data.channel) ? data.channel.join(', ') : data.channel}</div>
      <div>🔒 {data.privacy}</div>
      <div>👤 PCA: {data.pca}</div>
      {data.aca && <div>🔄 ACA: {data.aca}</div>}
    </div>
  </div>
);

const ProductNode = ({ data }: { data: any }) => (
  <div className="bg-purple-500 text-white p-3 rounded-lg shadow-lg border-2 border-purple-600 min-w-[180px]">
    <div className="font-bold text-sm mb-2">{data.name}</div>
    <div className="text-xs space-y-1">
      <div>📊 {data.asset_class}</div>
      <div className={`px-2 py-1 rounded ${
        data.mandate_status === 'Active' ? 'bg-green-600' :
        data.mandate_status === 'At Risk' ? 'bg-red-600' : 'bg-yellow-600'
      }`}>
        {data.mandate_status}
      </div>
    </div>
  </div>
);

const FieldConsultantNode = ({ data }: { data: any }) => (
  <div className="bg-green-500 text-white p-3 rounded-lg shadow-lg border-2 border-green-600 min-w-[150px]">
    <div className="font-bold text-sm mb-2">{data.name}</div>
    <div className="text-xs">Field Consultant</div>
  </div>
);

const nodeTypes = {
  consultant: ConsultantNode,
  company: CompanyNode,
  product: ProductNode,
  fieldConsultant: FieldConsultantNode,
};

// Filter Component
const FilterPanel = ({ 
  filters, 
  setFilters, 
  filterOptions, 
  onApplyFilters,
  loading 
}: {
  filters: GraphFilters;
  setFilters: (filters: GraphFilters) => void;
  filterOptions: FilterOptions | null;
  onApplyFilters: () => void;
  loading: boolean;
}) => {
  const handleFilterChange = (key: keyof GraphFilters, value: string[]) => {
    setFilters({ ...filters, [key]: value });
  };

  const clearFilters = () => {
    setFilters({});
  };

  if (!filterOptions) {
    return <div className="p-4">Loading filter options...</div>;
  }

  return (
    <div className="bg-white h-full overflow-y-auto border-l border-gray-200">
      <div className="p-4 border-b border-gray-200 bg-gray-50">
        <h2 className="text-lg font-semibold text-gray-800">Graph Filters</h2>
        <div className="flex gap-2 mt-2">
          <button
            onClick={onApplyFilters}
            disabled={loading}
            className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 disabled:opacity-50"
          >
            {loading ? 'Loading...' : 'Apply Filters'}
          </button>
          <button
            onClick={clearFilters}
            className="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600"
          >
            Clear All
          </button>
        </div>
      </div>

      <div className="p-4 space-y-6">
        {/* Geographic Filters */}
        <div>
          <h3 className="font-medium text-gray-800 mb-2">📍 Geographic</h3>
          
          <div className="mb-3">
            <label className="block text-sm font-medium text-gray-700 mb-1">Regions</label>
            <div className="space-y-1">
              {filterOptions.regions.map(region => (
                <label key={region} className="flex items-center">
                  <input
                    type="checkbox"
                    checked={filters.regions?.includes(region) || false}
                    onChange={(e) => {
                      const current = filters.regions || [];
                      const updated = e.target.checked 
                        ? [...current, region]
                        : current.filter(r => r !== region);
                      handleFilterChange('regions', updated);
                    }}
                    className="mr-2"
                  />
                  <span className="text-sm">{region}</span>
                </label>
              ))}
            </div>
          </div>

          <div className="mb-3">
            <label className="block text-sm font-medium text-gray-700 mb-1">Sales Regions</label>
            <select
              multiple
              value={filters.sales_regions || []}
              onChange={(e) => handleFilterChange('sales_regions', Array.from(e.target.selectedOptions, option => option.value))}
              className="w-full p-2 border border-gray-300 rounded text-sm"
              size={4}
            >
              {filterOptions.sales_regions.map(region => (
                <option key={region} value={region}>{region}</option>
              ))}
            </select>
          </div>

          <div className="mb-3">
            <label className="block text-sm font-medium text-gray-700 mb-1">Channels</label>
            <select
              multiple
              value={filters.channels || []}
              onChange={(e) => handleFilterChange('channels', Array.from(e.target.selectedOptions, option => option.value))}
              className="w-full p-2 border border-gray-300 rounded text-sm"
              size={3}
            >
              {filterOptions.channels.map(channel => (
                <option key={channel} value={channel}>{channel}</option>
              ))}
            </select>
          </div>
        </div>

        {/* Node Types */}
        <div>
          <h3 className="font-medium text-gray-800 mb-2">🔹 Node Types</h3>
          <div className="space-y-1">
            {['CONSULTANT', 'COMPANY', 'PRODUCT', 'FIELD_CONSULTANT'].map(type => (
              <label key={type} className="flex items-center">
                <input
                  type="checkbox"
                  checked={filters.node_types?.includes(type) || false}
                  onChange={(e) => {
                    const current = filters.node_types || [];
                    const updated = e.target.checked 
                      ? [...current, type]
                      : current.filter(t => t !== type);
                    handleFilterChange('node_types', updated);
                  }}
                  className="mr-2"
                />
                <span className="text-sm">{type.replace('_', ' ')}</span>
              </label>
            ))}
          </div>
        </div>

        {/* Asset Classes */}
        <div>
          <h3 className="font-medium text-gray-800 mb-2">📊 Asset Classes</h3>
          <select
            multiple
            value={filters.asset_classes || []}
            onChange={(e) => handleFilterChange('asset_classes', Array.from(e.target.selectedOptions, option => option.value))}
            className="w-full p-2 border border-gray-300 rounded text-sm"
            size={3}
          >
            {filterOptions.asset_classes.map(asset => (
              <option key={asset} value={asset}>{asset}</option>
            ))}
          </select>
        </div>

        {/* Mandate Status */}
        <div>
          <h3 className="font-medium text-gray-800 mb-2">📋 Mandate Status</h3>
          <div className="space-y-1">
            {filterOptions.mandate_status.map(status => (
              <label key={status} className="flex items-center">
                <input
                  type="checkbox"
                  checked={filters.mandate_status?.includes(status) || false}
                  onChange={(e) => {
                    const current = filters.mandate_status || [];
                    const updated = e.target.checked 
                      ? [...current, status]
                      : current.filter(s => s !== status);
                    handleFilterChange('mandate_status', updated);
                  }}
                  className="mr-2"
                />
                <span className={`text-sm px-2 py-1 rounded ${
                  status === 'Active' ? 'bg-green-100 text-green-800' :
                  status === 'At Risk' ? 'bg-red-100 text-red-800' : 'bg-yellow-100 text-yellow-800'
                }`}>
                  {status}
                </span>
              </label>
            ))}
          </div>
        </div>

        {/* Advisors */}
        <div>
          <h3 className="font-medium text-gray-800 mb-2">👤 Advisors</h3>
          
          <div className="mb-3">
            <label className="block text-sm font-medium text-gray-700 mb-1">Primary Consultant Advisor (PCA)</label>
            <select
              multiple
              value={filters.pca || []}
              onChange={(e) => handleFilterChange('pca', Array.from(e.target.selectedOptions, option => option.value))}
              className="w-full p-2 border border-gray-300 rounded text-sm"
              size={3}
            >
              {filterOptions.pca_options.map(pca => (
                <option key={pca} value={pca}>{pca}</option>
              ))}
            </select>
          </div>

          <div className="mb-3">
            <label className="block text-sm font-medium text-gray-700 mb-1">Alternate Client Advisor (ACA)</label>
            <select
              multiple
              value={filters.aca || []}
              onChange={(e) => handleFilterChange('aca', Array.from(e.target.selectedOptions, option => option.value))}
              className="w-full p-2 border border-gray-300 rounded text-sm"
              size={3}
            >
              {filterOptions.aca_options.map(aca => (
                <option key={aca} value={aca}>{aca}</option>
              ))}
            </select>
          </div>
        </div>

        {/* Privacy & Influence */}
        <div>
          <h3 className="font-medium text-gray-800 mb-2">🔒 Privacy & Influence</h3>
          
          <div className="mb-3">
            <label className="block text-sm font-medium text-gray-700 mb-1">Privacy Levels</label>
            <div className="space-y-1">
              {filterOptions.privacy_levels.map(privacy => (
                <label key={privacy} className="flex items-center">
                  <input
                    type="checkbox"
                    checked={filters.privacy_levels?.includes(privacy) || false}
                    onChange={(e) => {
                      const current = filters.privacy_levels || [];
                      const updated = e.target.checked 
                        ? [...current, privacy]
                        : current.filter(p => p !== privacy);
                      handleFilterChange('privacy_levels', updated);
                    }}
                    className="mr-2"
                  />
                  <span className="text-sm">{privacy}</span>
                </label>
              ))}
            </div>
          </div>

          <div className="mb-3">
            <label className="block text-sm font-medium text-gray-700 mb-1">Level of Influence</label>
            <select
              multiple
              value={filters.level_of_influence || []}
              onChange={(e) => handleFilterChange('level_of_influence', Array.from(e.target.selectedOptions, option => option.value))}
              className="w-full p-2 border border-gray-300 rounded text-sm"
              size={3}
            >
              {filterOptions.level_of_influence.map(level => (
                <option key={level} value={level}>{level}</option>
              ))}
            </select>
          </div>
        </div>

        {/* Ratings */}
        <div>
          <h3 className="font-medium text-gray-800 mb-2">⭐ Ratings</h3>
          
          <div className="mb-3">
            <label className="block text-sm font-medium text-gray-700 mb-1">Rating Change</label>
            <div className="space-y-1">
              {filterOptions.rating_changes.map(change => (
                <label key={change} className="flex items-center">
                  <input
                    type="checkbox"
                    checked={filters.rating_change?.includes(change) || false}
                    onChange={(e) => {
                      const current = filters.rating_change || [];
                      const updated = e.target.checked 
                        ? [...current, change]
                        : current.filter(c => c !== change);
                      handleFilterChange('rating_change', updated);
                    }}
                    className="mr-2"
                  />
                  <span className={`text-sm px-2 py-1 rounded ${
                    change === 'Upgrade' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'
                  }`}>
                    {change}
                  </span>
                </label>
              ))}
            </div>
          </div>

          <div className="mb-3">
            <label className="block text-sm font-medium text-gray-700 mb-1">Rank Group</label>
            <div className="space-y-1">
              {filterOptions.rank_groups.map(group => (
                <label key={group} className="flex items-center">
                  <input
                    type="checkbox"
                    checked={filters.rank_group?.includes(group) || false}
                    onChange={(e) => {
                      const current = filters.rank_group || [];
                      const updated = e.target.checked 
                        ? [...current, group]
                        : current.filter(g => g !== group);
                      handleFilterChange('rank_group', updated);
                    }}
                    className="mr-2"
                  />
                  <span className={`text-sm px-2 py-1 rounded ${
                    group === 'Positive' ? 'bg-blue-100 text-blue-800' : 'bg-orange-100 text-orange-800'
                  }`}>
                    {group}
                  </span>
                </label>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// Main Component
const JPMGraphVisualization = () => {
  const [nodes, setNodes, onNodesChange] = useNodesState([]);
  const [edges, setEdges, onEdgesChange] = useEdgesState([]);
  const [loading, setLoading] = useState(false);
  const [metadata, setMetadata] = useState<any>(null);
  const [filters, setFilters] = useState<GraphFilters>({});
  const [filterOptions, setFilterOptions] = useState<FilterOptions | null>(null);

  // Fetch filter options
  useEffect(() => {
    const fetchFilterOptions = async () => {
      try {
        const response = await fetch('/api/v1/filters/options');
        const data = await response.json();
        setFilterOptions(data);
      } catch (error) {
        console.error('Error fetching filter options:', error);
      }
    };
    fetchFilterOptions();
  }, []);

  // Transform API data to React Flow format
  const transformGraphData = useCallback((apiData: any) => {
    const { nodes: apiNodes, edges: apiEdges } = apiData;

    // Transform nodes
    const flowNodes: Node[] = apiNodes.map((node: any, index: number) => {
      // Calculate position (circular layout)
      const angle = (index / apiNodes.length) * 2 * Math.PI;
      const radius = Math.min(250, apiNodes.length * 25);
      
      return {
        id: node.id,
        type: getNodeType(node.type),
        position: {
          x: 300 + radius * Math.cos(angle),
          y: 300 + radius * Math.sin(angle)
        },
        data: node
      };
    });

    // Transform edges
    const flowEdges: Edge[] = apiEdges.map((edge: any) => ({
      id: edge.id,
      source: edge.source,
      target: edge.target,
      label: getEdgeLabel(edge),
      style: getEdgeStyle(edge),
      markerEnd: { type: MarkerType.ArrowClosed },
      data: edge
    }));

    return { nodes: flowNodes, edges: flowEdges };
  }, []);

  const getNodeType = (apiNodeType: string) => {
    switch (apiNodeType) {
      case 'CONSULTANT': return 'consultant';
      case 'COMPANY': return 'company';
      case 'PRODUCT': return 'product';
      case 'FIELD_CONSULTANT': return 'fieldConsultant';
      default: return 'default';
    }
  };

  const getEdgeLabel = (edge: any) => {
    switch (edge.type) {
      case 'OWNS':
        return `OWNS (${edge.mandate_status})`;
      case 'RATES':
        return `RATES (${edge.rankgroup || 'N/A'})`;
      case 'COVERS':
        return `COVERS`;
      case 'EMPLOYS':
        return `EMPLOYS`;
      default:
        return edge.type;
    }
  };

  const getEdgeStyle = (edge: any) => {
    switch (edge.type) {
      case 'OWNS':
        return {
          stroke: edge.mandate_status === 'Active' ? '#4caf50' : 
                 edge.mandate_status === 'At Risk' ? '#f44336' : '#ff9800',
          strokeWidth: 3
        };
      case 'RATES':
        return {
          stroke: edge.rankgroup === 'Positive' ? '#2196f3' : '#ff5722',
          strokeWidth: 2,
          strokeDasharray: edge.rating_change === 'Upgrade' ? 'none' : '5,5'
        };
      case 'COVERS':
        return { stroke: '#607d8b', strokeWidth: 2 };
      case 'EMPLOYS':
        return { stroke: '#9c27b0', strokeWidth: 2 };
      default:
        return { stroke: '#666', strokeWidth: 1 };
    }
  };

  // Fetch graph data
  const fetchGraphData = useCallback(async (appliedFilters: GraphFilters) => {
    setLoading(true);
    try {
      const response = await fetch('/api/v1/graph/data', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          filters: appliedFilters,
          limit: 100 
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        const { nodes: flowNodes, edges: flowEdges } = transformGraphData(result.data);
        setNodes(flowNodes);
        setEdges(flowEdges);
        setMetadata(result.data.metadata);
      }
    } catch (error) {
      console.error('Error fetching graph data:', error);
    } finally {
      setLoading(false);
    }
  }, [transformGraphData]);

  // Initial load
  useEffect(() => {
    fetchGraphData({});
  }, [fetchGraphData]);

  const handleApplyFilters = () => {
    fetchGraphData(filters);
  };

  return (
    <div className="flex h-screen bg-gray-100">
      {/* Graph Visualization - 60% width */}
      <div className="w-3/5 bg-white">
        <div className="h-16 bg-gray-50 border-b border-gray-200 flex items-center px-4">
          <h1 className="text-xl font-semibold text-gray-800">JPM Business Network Graph</h1>
          {metadata && (
            <div className="ml-auto flex space-x-4 text-sm text-gray-600">
              <span>Nodes: {metadata.total_nodes}</span>
              <span>Edges: {metadata.total_edges}</span>
              <span>Consultants: {metadata.node_type_counts?.CONSULTANT || 0}</span>
              <span>Companies: {metadata.node_type_counts?.COMPANY || 0}</span>
              <span>Products: {metadata.node_type_counts?.PRODUCT || 0}</span>
            </div>
          )}
        </div>
        
        <div className="h-[calc(100vh-4rem)]">
          <ReactFlow
            nodes={nodes}
            edges={edges}
            onNodesChange={onNodesChange}
            onEdgesChange={onEdgesChange}
            nodeTypes={nodeTypes}
            connectionMode={ConnectionMode.Loose}
            fitView
            attributionPosition="bottom-left"
          >
            <Controls />
            <Background />
          </ReactFlow>
        </div>

        {loading && (
          <div className="absolute inset-0 bg-black bg-opacity-20 flex items-center justify-center">
            <div className="bg-white p-4 rounded-lg shadow-lg">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto"></div>
              <p className="mt-2 text-sm text-gray-600">Loading graph data...</p>
            </div>
          </div>
        )}
      </div>

      {/* Filter Panel - 40% width */}
      <div className="w-2/5">
        <FilterPanel
          filters={filters}
          setFilters={setFilters}
          filterOptions={filterOptions}
          onApplyFilters={handleApplyFilters}
          loading={loading}
        />
      </div>
    </div>
  );
};

export default JPMGraphVisualization;